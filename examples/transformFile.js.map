{"version":3,"sources":["webpack:///./examples/transformFile.js"],"names":["uploadProps","action","multiple","data","a","b","headers","Authorization","onStart","file","console","log","name","onSuccess","ret","onError","err","onProgress","percent","transformFile","Promise","resolve","reader","FileReader","readAsDataURL","onload","canvas","document","createElement","img","src","result","ctx","getContext","drawImage","toBlob","Test","margin","ReactDOM","render","getElementById"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA,IAAMA,cAAc;AAClBC,UAAQ,YADU;AAElBC,YAAU,KAFQ;AAGlBC,QAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAHY;AAIlBC,WAAS;AACPC,mBAAe;AADR,GAJS;AAOlBC,SAPkB,mBAOVC,IAPU,EAOJ;AACZC,YAAQC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB,EAA6BA,KAAKG,IAAlC;AACD,GATiB;AAUlBC,WAVkB,qBAURC,GAVQ,EAUHL,IAVG,EAUG;AACnBC,YAAQC,GAAR,CAAY,WAAZ,EAAyBG,GAAzB,EAA8BL,KAAKG,IAAnC;AACD,GAZiB;AAalBG,SAbkB,mBAaVC,GAbU,EAaL;AACXN,YAAQC,GAAR,CAAY,SAAZ,EAAuBK,GAAvB;AACD,GAfiB;AAgBlBC,YAhBkB,4BAgBMR,IAhBN,EAgBY;AAAA,QAAjBS,OAAiB,QAAjBA,OAAiB;;AAC5BR,YAAQC,GAAR,CAAY,YAAZ,EAA6BO,OAA7B,QAAyCT,KAAKG,IAA9C;AACD,GAlBiB;AAmBlBO,eAnBkB,yBAmBJV,IAnBI,EAmBE;AAClB,WAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,UAAMC,SAAS,IAAIC,UAAJ,EAAf;AACAD,aAAOE,aAAP,CAAqBf,IAArB;AACAa,aAAOG,MAAP,GAAgB,YAAM;AACpB,YAAMC,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAf;AACA,YAAMC,MAAMF,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACAC,YAAIC,GAAJ,GAAUR,OAAOS,MAAjB;AACAF,YAAIJ,MAAJ,GAAa,YAAM;AACjB,cAAMO,MAAMN,OAAOO,UAAP,CAAkB,IAAlB,CAAZ;AACAD,cAAIE,SAAJ,CAAcL,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;AACAH,iBAAOS,MAAP,CAAcd,OAAd;AACD,SAJD;AAKD,OATD;AAUD,KAbM,CAAP;AAcD;AAlCiB,CAApB;;AAqCA,IAAMe,OAAO,SAAPA,IAAO,GAAM;AACjB,SACE;AAAA;AAAA;AACE,aAAO;AACLC,gBAAQ;AADH;AADT;AAKE;AAAA;AAAA;AACE;AAAC,mEAAD;AAAYrC,mBAAZ;AACE;AAAA;AAAA;AAAA;AAAA;AADF;AADF;AALF,GADF;AAaD,CAdD;;AAgBAsC,iDAAQA,CAACC,MAAT,CAAgB,4DAAC,IAAD,OAAhB,EAA0BZ,SAASa,cAAT,CAAwB,iBAAxB,CAA1B,E","file":"examples/transformFile.js","sourcesContent":["/* eslint no-console:0 */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Upload from '@gem-mine/rc-upload';\n\nconst uploadProps = {\n  action: '/upload.do',\n  multiple: false,\n  data: { a: 1, b: 2 },\n  headers: {\n    Authorization: '$prefix $token',\n  },\n  onStart(file) {\n    console.log('onStart', file, file.name);\n  },\n  onSuccess(ret, file) {\n    console.log('onSuccess', ret, file.name);\n  },\n  onError(err) {\n    console.log('onError', err);\n  },\n  onProgress({ percent }, file) {\n    console.log('onProgress', `${percent}%`, file.name);\n  },\n  transformFile(file) {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const canvas = document.createElement('canvas');\n        const img = document.createElement('img');\n        img.src = reader.result;\n        img.onload = () => {\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          canvas.toBlob(resolve);\n        };\n      };\n    });\n  },\n};\n\nconst Test = () => {\n  return (\n    <div\n      style={{\n        margin: 100,\n      }}\n    >\n      <div>\n        <Upload {...uploadProps}>\n          <button>开始上传</button>\n        </Upload>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Test />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/transformFile.js"],"sourceRoot":""}